# encoding=utf-8
"""
Django settings for exam_system project.

Generated by 'django-admin startproject' using Django 3.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b(7ov0aups0yfibsj558(amwa$%r4x0gk#in4d%ohvswh%_o+@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False


#  Django 应用程序的主机名（或 IP 地址）。它提供了一层安全机制，用于防止 HTTP Host 头攻击。
# 示例：ALLOWED_HOSTS = ['yourdomain.com', 'sub.yourdomain.com', 'your-ip-address']
ALLOWED_HOSTS = ['*']

# 更改django默认的 user 数据结构
AUTH_USER_MODEL = "user.User"

# 更改django默认的 group 数据结构。 注，自定义Group会导致问题，暂未排查原因，报错：RuntimeError: Model class models.User doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.
# AUTH_GROUP_MODEL = 'custom_group.CustomGroup'

INSTALLED_APPS = [
    # 添加app
    'user',  # 用户、班级  由于涉及auth.User的更改，需要放置在auth模块前
    # 'custom_group', # 无法自定义group，废弃

    # 【视频】
    'video',  # 视频

    # 【文件下载】
    'ftp',

    # 【公告】
    'notice',

    # 【考试】
    'question_manage',  # 试题管理
    'exam_manage',  # 考试管理
    'exam_score',  # 考试分数管理
    'license',

    # 【学科】
    'subject_manage',

    # 【系统】
    'module',  # 功能板块
    'system_manage',  # 系统管理

    # 【系统监控】
    'system_monitor',  # 系统监控

    # 【消息通知】
    'message_handle',   # 日志消息通知

    # -------------【以下为非手工创建 apps 】-------------
    # 'csp',   # 限制发送csp的header，以便vue可控制浏览器监听鼠标事件

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 权限管理 django-guardian
    'guardian',

    # 支持跨域
    'corsheaders',

    # 自动绘制类图扩展
    # 'django_extensions',

    # DRF配置
    'rest_framework',

]

AUTHENTICATION_BACKENDS = [
    # 更改认证方式，使用自定义认证方式替代
    'user.auth.CustomBackend',
    # app:考试管理 更变认证方式，取消django默认给所有用户 关于某app 的view，未能使用，暂不细究
    # 'exam_manage.permissions.ExamManageCustomPermissionBackend',

    # django默认后端鉴权
    'django.contrib.auth.backends.ModelBackend',

    # 权限管理 django-guardian，基于如上的 django默认后端鉴权
    'guardian.backends.ObjectPermissionBackend',
]

MIDDLEWARE = [
    # 跨域设置
    'corsheaders.middleware.CorsMiddleware',

    # CSP header 中间件
    # 'csp.middleware.CSPMiddleware',

    'django.middleware.security.SecurityMiddleware',
    # django自带session的认证鉴权
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',

    # CSRF cookie保护
    # 'django.middleware.csrf.CsrfViewMiddleware',

    # django自带session的认证鉴权
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 应用中自定义中间件
    # 'user.middlewares.AuthCookie',  # 因为auth认证在auth之后，顺序建议放在末尾
]

ROOT_URLCONF = 'exam_system.urls'

# 前端文件（已放弃Django内部署静态文件，改采用前后端分离方式）
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# STATICFILES_DIRS = [
    # 其他静态资源目录
    # os.path.join(BASE_DIR, "static"),
# ]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [STATIC_ROOT, ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'exam_system.wsgi.application'

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': {
        # 此处默认使用sqlite，我进行更改
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',

        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        # 部署时
        'HOST': 'es_mysql',  # 数据库地址，本机 ip 地址 127.0.0.1 192.168.1.58
        # 开发时
        # 'HOST': 'localhost',
        'PORT': 3306,  # 端口
        'NAME': 'exam_system',  # 数据库名称
        'USER': 'root',  # 数据库用户名
        'PASSWORD': '1qaz@WSX',  # 数据库密码
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 限制CSP
# CSP_DEFAULT_SRC = ("'self'",)
# CSP_STYLE_SRC = ("'self'", "'unsafe-inline'",)
# CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "'unsafe-eval'")

# 跨域设置
# 设置允许的域名  如果使用 如CORS_ALLOWED_ORIGINS = ["http://example.com", "http://127.0.0.1:8000",] 限制已增强安全性，则需要注释 CORS_ORIGIN_ALLOW_ALL
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = ["http://localhost",]
# 测试了下，这里如果写 http://localhost:80 ,则浏览器访问 http://localhost 就会跨域报错，虽然http默认80，但是这里写上80就不对了，故推荐直接写 http://localhost，或者默认端口的多谢写一个有端口的规则。
# 允许携带认证信息，即允许跨域携带本cookie
CORS_ALLOW_CREDENTIALS = True

# 媒体文件路径，指向 volume/media 目录，如 视频
MEDIA_ROOT = os.path.join(BASE_DIR, 'volume', 'media')

# 教师上传教学视频保存目录
TEACHING_VIDEO_ROOT = os.path.join(MEDIA_ROOT, 'videos')
# 视频下载地址  http://shenyanjian.cn/static/media/videos/ + 视频名字

# 教师上传文档类保存目录
# 教师下载考试预览的word格式试卷
TEACHING_FTP_ROOT = os.path.join(MEDIA_ROOT, 'documents')
# 视频下载地址  http://shenyanjian.cn/static/media/documents/ + 考试命名的word

# 批量导入excel的保存目录
# 虽然命名是 import_question，但是实际上其他的导入用户、导入视频的excel等批量文件均存放此目录下
EXCEL_IMPORT_QUESTION_ROOT = os.path.join(MEDIA_ROOT, 'import_excel_upload')

# 日志log的路径
LOG_ROOT = os.path.join(BASE_DIR, 'volume', 'log')

# 【license】
# pickle序列化的计时文件
PICKLE_LICENSE_DATA = os.path.join(BASE_DIR, 'scripts', 'license.data')
# 停机多长时间则关闭系统功能：如 stu、tea用户登录
LICENSE_SHUTDOWN_TIME = 48 * 60 * 60    # 单位 秒
# license提交，允许单词的最长校验时间
LICENSE_LARGEST_DAYS = 400  # 单位 天
# 系统初始化默认license试用期
LICENSE_INIT_TRIAL_DAYS = 2 * 24    # 单位 小时

# session 设置
# 参考https://blog.csdn.net/weixin_44110998/article/details/102969466
SESSION_COOKIE_NAME = "session_id"
# 设置session过期时间  1天
SESSION_COOKIE_AGE = 86400  # 单位 秒
# SESSION_COOKIE_AGE = 10

# 关闭浏览器，session失效
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# 为了方便前端联调，cookie设置为非http_only
SESSION_COOKIE_HTTPONLY = False
# 取消cookie同源配置

# django + vue，有时浏览器接收到cookie但是提示SameSite=Lax不接受cookie，需要改该标志为空
# 会话cookie上SameSite标志的值。此标志防止在跨站点请求中发送cookie，从而防止CSRF攻击，并使某些窃取会话cookie的方法不可能实现。
# SESSION_COOKIE_SAMESITE = 'Lax'  带不带SameSite标志，不是本行设置的问题
SESSION_COOKIE_SAMESITE = None  # response header set-cookie:samesite=lax  Default: 'Lax'
CSRF_COOKIE_SAMESITE = None

# DRF配置
REST_FRAMEWORK = {
    # 【分页器】
    # 参考 https://blog.csdn.net/weixin_42134789/article/details/109975003
    # page size型
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # page offset型
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 30,

    # DRF的鉴权和认证，是DRF自己的那套，不同于django默认的session认证。比如同一个cookie，可以登录django，但是对于DRF而言是匿名用户。
    'DEFAULT_PERMISSION_CLASSES': [
        # 仅允许 登录用户
        'rest_framework.permissions.IsAuthenticated',

        # 权限，可以参考DjangoObjectPermissions的类文档，必须django-guardian这种对象级权限控制的组件配合使用
        # 需要用户既有 模型级 权限，也要有 对象级权限，才能通过drf操作，否则返回403.
        # 赋予权限如     pm = 'video.delete_video'
        #     video = Video.objects.get(id=28)
        #     print(user.has_perm(pm, video))
        #     print(assign_perm(pm, user))      # 赋予模型级权限
        #     print(assign_perm(pm, user, video))   # 赋予对象级权限
        'rest_framework.permissions.DjangoObjectPermissions',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # SessionAuthentication 使得DRF使用django默认使用的auth的session进行管理，如 viewset的 create、destory方法的request.user 使用同 django默认
        # SessionAuthentication 源代码修改，已取消csrf token校验
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ],

    # 分页，直接改不生效。参考 https://blog.csdn.net/dqchouyang/article/details/89947974
    # 'PAGE_SIZE': 4,

    'DEFAULT_RENDERER_CLASSES': [
        # 渲染DRF的WEB页面，开启此项，GET获取某model的list默认是网页，此时求json需要?format=json；若不开启此项则默认json
        'rest_framework.renderers.BrowsableAPIRenderer',

        # 支持json
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        # 支持WEB页面直接使用 json 的API发送数据
        'rest_framework.parsers.JSONParser',
    ],
}

# 自动绘制 类图，借助django-extensions pyparsing pydot
# GRAPH_MODELS = {
#   'all_applications': True,
#   'group_models': True,
# }
